// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            UserRole         @default(CUSTOMER)
  orders          Order[]
  seller          Seller?
  contentReports  ContentReport[]  @relation("ReportedBy")
  moderationEvents ModerationEvent[] @relation("ModeratedBy")
  reportedContent ContentReport[]  @relation("ReportedContent")
  productViews    ProductView[]
  userEngagement  UserEngagement?
  serviceBookings ServiceBooking[]
}

enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
  MODERATOR
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String        @db.Text
  price         Float
  inventory     Int
  sellerId      String
  seller        Seller        @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderItems    OrderItem[]
  productViews  ProductView[]
  inventoryLogs InventoryLog[]
  
  @@index([sellerId])
}

model ProductView {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  sessionId   String?
  timestamp   DateTime @default(now())
  source      String?  // e.g., "search", "recommendation", "direct"
  
  @@index([productId])
  @@index([userId])
  @@index([timestamp])
}

model InventoryLog {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int      // Can be positive (restocked) or negative (sold)
  type        String   // "sale", "restock", "adjustment"
  timestamp   DateTime @default(now())
  note        String?
  
  @@index([productId])
  @@index([timestamp])
}

model UserEngagement {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  lastLogin           DateTime @default(now())
  totalLogins         Int      @default(0)
  totalOrders         Int      @default(0)
  totalSpent          Float    @default(0)
  avgOrderValue       Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([userId])
}

model SalesMetric {
  id            String   @id @default(cuid())
  sellerId      String
  seller        Seller   @relation(fields: [sellerId], references: [id])
  date          DateTime
  revenue       Float
  orderCount    Int
  avgOrderValue Float
  
  @@unique([sellerId, date])
  @@index([sellerId])
  @@index([date])
}

model Seller {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName       String
  description     String?          @db.Text
  contactEmail    String
  bannerImage     String?
  logoImage       String?
  businessHours   Json?            // Store opening hours in JSON format
  location        String?
  socialLinks     Json?            // Store social media links in JSON format
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orders          Order[]          @relation("SellerOrders")
  products        Product[]
  salesMetrics    SalesMetric[]
  services        WeddingService[]
  serviceBookings ServiceBooking[]
  portfolioItems  PortfolioItem[]
  reviews         ServiceReview[]
}

model ServiceCategory {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?          @db.Text
  services    WeddingService[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model WeddingService {
  id            String          @id @default(cuid())
  name          String
  description   String          @db.Text
  price         Float?          // Null if "Price upon request"
  priceType     PriceType      @default(FIXED)
  categoryId    String
  category      ServiceCategory @relation(fields: [categoryId], references: [id])
  sellerId      String
  seller        Seller         @relation(fields: [sellerId], references: [id])
  images        String[]       // Array of image URLs
  features      String[]       // Array of service features/inclusions
  availability  Json?          // Store availability windows in JSON format
  bookings      ServiceBooking[]
  reviews       ServiceReview[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  listingFee    Float?         // Optional listing fee charged by platform
  commission    Float?         // Optional commission percentage

  @@index([sellerId])
  @@index([categoryId])
}

model ServiceBooking {
  id          String         @id @default(cuid())
  serviceId   String
  service     WeddingService @relation(fields: [serviceId], references: [id])
  sellerId    String
  seller      Seller        @relation(fields: [sellerId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  status      BookingStatus @default(PENDING)
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  notes       String?       @db.Text
  totalAmount Float
  deposit     Float?
  isPaid      Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([serviceId])
  @@index([sellerId])
  @@index([userId])
}

model PortfolioItem {
  id          String   @id @default(cuid())
  sellerId    String
  seller      Seller   @relation(fields: [sellerId], references: [id])
  title       String
  description String?  @db.Text
  imageUrl    String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sellerId])
}

model ServiceReview {
  id          String         @id @default(cuid())
  serviceId   String
  service     WeddingService @relation(fields: [serviceId], references: [id])
  sellerId    String
  seller      Seller        @relation(fields: [sellerId], references: [id])
  rating      Int
  comment     String?       @db.Text
  images      String[]      // Array of review image URLs
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([serviceId])
  @@index([sellerId])
}

enum PriceType {
  FIXED
  HOURLY
  PACKAGE
  CUSTOM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ContentType {
  PRODUCT
  REVIEW
  USER_PROFILE
  SELLER_PROFILE
  REGISTRY
  SERVICE
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ModerationAction {
  APPROVE
  REJECT
  DELETE
  FLAG
  WARN
  SUSPEND
}

model ContentReport {
  id          String       @id @default(cuid())
  type        ContentType
  contentId   String
  reason      String       @db.Text
  details     String?      @db.Text
  status      ReportStatus @default(PENDING)
  reportedBy  User        @relation("ReportedBy", fields: [userId], references: [id])
  userId      String
  reportedUser User?      @relation("ReportedContent", fields: [reportedUserId], references: [id])
  reportedUserId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  moderationEvents ModerationEvent[] @relation("ReportModeration")

  @@index([type, contentId])
  @@index([status])
  @@index([userId])
}

model ModerationEvent {
  id            String      @id @default(cuid())
  action        ModerationAction
  moderator     User        @relation("ModeratedBy", fields: [moderatorId], references: [id])
  moderatorId   String
  report        ContentReport @relation("ReportModeration", fields: [reportId], references: [id])
  reportId      String
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())

  @@index([moderatorId])
  @@index([reportId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  sellerId        String
  seller          Seller      @relation("SellerOrders", fields: [sellerId], references: [id])
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippingAddress String
  trackingNumber  String?
  carrier         ShippingCarrier?
  shippingStatus  ShippingStatus?  @default(PENDING)
  estimatedDeliveryDate DateTime?
  shippingEvents ShippingEvent[]
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ShippingEvent {
  id          String         @id @default(cuid())
  orderId     String
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      ShippingStatus
  location    String
  description String
  timestamp   DateTime       @default(now())
  createdAt   DateTime       @default(now())

  @@index([orderId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ShippingStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
}

enum ShippingCarrier {
  USPS
  UPS
  FEDEX
  DHL
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model HelpCategory {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?       @db.Text
  articles    HelpArticle[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([slug])
}

model HelpTag {
  id          String        @id @default(cuid())
  name        String        @unique
  articles    HelpArticle[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model HelpArticle {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String        @db.Text
  excerpt     String        @db.Text
  status      ArticleStatus @default(PUBLISHED)
  category    HelpCategory  @relation(fields: [categoryId], references: [id])
  categoryId  String
  tags        HelpTag[]
  views       Int           @default(0)
  helpful     Int           @default(0)
  notHelpful  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@index([status])
}
