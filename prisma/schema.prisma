// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            UserRole        @default(CUSTOMER)
  orders          Order[]
  seller          Seller?
  contentReports  ContentReport[] @relation("ReportedBy")
  moderationEvents ModerationEvent[] @relation("ModeratedBy")
  reportedContent ContentReport[] @relation("ReportedContent")
}

enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
  MODERATOR
}

enum ContentType {
  PRODUCT
  REVIEW
  USER_PROFILE
  SELLER_PROFILE
  REGISTRY
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ModerationAction {
  APPROVE
  REJECT
  DELETE
  FLAG
  WARN
  SUSPEND
}

model ContentReport {
  id          String       @id @default(cuid())
  type        ContentType
  contentId   String
  reason      String       @db.Text
  details     String?      @db.Text
  status      ReportStatus @default(PENDING)
  reportedBy  User        @relation("ReportedBy", fields: [userId], references: [id])
  userId      String
  reportedUser User?      @relation("ReportedContent", fields: [reportedUserId], references: [id])
  reportedUserId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  moderationEvents ModerationEvent[] @relation("ReportModeration")

  @@index([type, contentId])
  @@index([status])
  @@index([userId])
}

model ModerationEvent {
  id            String      @id @default(cuid())
  action        ModerationAction
  moderator     User        @relation("ModeratedBy", fields: [moderatorId], references: [id])
  moderatorId   String
  report        ContentReport @relation("ReportModeration", fields: [reportId], references: [id])
  reportId      String
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())

  @@index([moderatorId])
  @@index([reportId])
}

model Seller {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName       String
  description     String?   @db.Text
  contactEmail    String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          Order[]   @relation("SellerOrders")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  sellerId        String
  seller          Seller      @relation("SellerOrders", fields: [sellerId], references: [id])
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippingAddress String
  // Shipping tracking fields
  trackingNumber  String?
  carrier         ShippingCarrier?
  shippingStatus  ShippingStatus?  @default(PENDING)
  estimatedDeliveryDate DateTime?
  shippingEvents ShippingEvent[]
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model ShippingEvent {
  id          String         @id @default(cuid())
  orderId     String
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      ShippingStatus
  location    String
  description String
  timestamp   DateTime       @default(now())
  createdAt   DateTime       @default(now())

  @@index([orderId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ShippingStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
}

enum ShippingCarrier {
  USPS
  UPS
  FEDEX
  DHL
}
